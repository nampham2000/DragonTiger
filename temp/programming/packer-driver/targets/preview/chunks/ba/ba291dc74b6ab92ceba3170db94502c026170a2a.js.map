{"version":3,"sources":["file:///Users/waostudio/Downloads/Telegram%20Desktop/TigerDragon4/assets/Scripts/NetworkConnect.ts"],"names":["_decorator","Component","Label","Node","Colyseus","ccclass","property","NetworkConnect","type","String","Number","Boolean","client","room","start","Client","useSSL","hostname","port","connect","rooms","getAvailableRooms","length","create","console","log","sessionId","joinById","roomId","onMessage","message","updatePlayerList","onStateChange","state","players","values","onLeave","code","e","error","playerList","numElements","ListL","forEach","node","active","i","ListLabel","string"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Node } from \"cc\";\nconst { ccclass, property } = _decorator;\nimport Colyseus from \"db://colyseus-sdk/colyseus.js\";\n\n@ccclass(\"NetworkConnect\")\nexport class NetworkConnect extends Component {\n  @property({ type: String })\n  hostname = \"7bb3-115-79-59-222.ngrok-free.app\";\n\n  @property({ type: Number })\n  port = 80;\n\n  @property({ type: Boolean })\n  useSSL = true;\n\n  @property({ type: Node })\n  private ListL: Node[] = [];\n\n  @property({ type: Label })\n  private ListLabel: Label[] = [];\n\n  client!: Colyseus.Client;\n  room!: Colyseus.Room;\n\n  start() {\n    this.client = new Colyseus.Client(\n      `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}:${this.port}`\n    );\n\n    this.connect();\n  }\n\n  async connect() {\n    try {\n      const rooms = await this.client.getAvailableRooms(\"room1\");\n      if (rooms.length === 0) {\n        this.room = await this.client.create(\"room1\");\n        console.log(\"Created new room with sessionId:\", this.room.sessionId);\n      } else {\n        // Nếu có phòng có sẵn, tham gia vào phòng đầu tiên trong danh sách\n        this.room = await this.client.joinById(rooms[0].roomId);\n        console.log(\n          \"Joined existing room with sessionId:\",\n          this.room.sessionId\n        );\n      }\n\n      console.log(\"Joined successfully!\");\n      console.log(\"User's sessionId:\", this.room.sessionId);\n\n      this.room.onMessage(\"playerList\", (message) => {\n        this.updatePlayerList(message);\n      });\n\n      this.room.onStateChange((state) => {\n        console.log(\"Room state changed:\", state);\n        console.log(\"onStateChange: \", state);\n        console.log(\"Players\", [...state.players.values()]);\n      });\n\n      this.room.onLeave((code) => {\n        console.log(\"Left room with code:\", code);\n      });\n    } catch (e) {\n      console.error(\"Error:\", e);\n    }\n  }\n\n  updatePlayerList(playerList: any[]) {\n    const numElements = playerList.length;\n    this.ListL.forEach((node) => {\n      node.active = false;\n    });\n    for (let i = 0; i < numElements && i < this.ListL.length; i++) {\n      this.ListL[i].active = true;\n      this.ListLabel[i].string = playerList[i].sessionId;\n    }\n  }\n}\n// import { _decorator, Component, Label, Node } from \"cc\";\n// const { ccclass, property } = _decorator;\n// import Colyseus from \"db://colyseus-sdk/colyseus.js\";\n\n// @ccclass(\"NetworkConnect\")\n// export class NetworkConnect extends Component {\n//   @property({ type: String })\n//   hostname = \"7bb3-115-79-59-222.ngrok-free.app\";\n\n//   @property({ type: Number })\n//   port = 80;\n\n//   @property({ type: Boolean })\n//   useSSL = true;\n\n//   @property({ type: Node })\n//   private ListL: Node[] = [];\n\n//   @property({ type: Label })\n//   private ListLabel: Label[] = [];\n\n//   client!: Colyseus.Client;\n//   room!: Colyseus.Room;\n\n//   start() {\n//     this.client = new Colyseus.Client(\n//       `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}:${this.port}`\n//     );\n\n//     this.connect();\n//   }\n\n//   async connect() {\n//     try {\n//       this.room = await this.client.joinById(\"Room1\");\n//       console.log(\"Joined successfully!\");\n//       console.log(\"User's sessionId:\", this.room.sessionId);\n\n//       this.startCountdown();\n//       this.setupEventListeners();\n//     } catch (e) {\n//       console.error(\"Error:\", e);\n//     }\n//   }\n\n//   startCountdown() {\n//     const countdownInterval = setInterval(() => {\n//       if (this.room.state.countdown > 0) {\n//         this.room.state.countdown--;\n//         console.log(\"Countdown:\", this.room.state.countdown);\n//         this.room.send(\"countdown\", this.room.state.countdown);\n//       } else {\n//         clearInterval(countdownInterval);\n//       }\n//     }, 1000);\n//   }\n\n//   setupEventListeners() {\n//     this.room.onMessage(\"countdown\", (countdown: number) => {\n//       // Cập nhật giao diện người chơi với giá trị mới của biến đếm ngược\n//     });\n\n//     this.room.onStateChange((state) => {\n//       console.log(\"Room state changed:\", state);\n//     });\n\n//     this.room.onLeave((code) => {\n//       console.log(\"Left room with code:\", code);\n//     });\n//   }\n// }\n"]}