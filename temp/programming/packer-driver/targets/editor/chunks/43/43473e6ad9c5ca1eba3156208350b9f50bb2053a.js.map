{"version":3,"sources":["file:///Users/waostudio/Desktop/Fix2/assets/Scripts/NetworkConnect.ts"],"names":["_decorator","Component","Label","Node","Colyseus","AudioController","ccclass","property","NetworkConnect","type","String","Number","Boolean","client","room","gameState","resultDragon","resultTiger","TotalUser","UserBet","NotmeBet","result","start","Client","useSSL","hostname","port","connect","rooms","getAvailableRooms","length","create","console","log","sessionId","joinById","roomId","onMessage","message","TimerDown","string","onAudio","dragonCard","value","tigerCard","playerID","onStateChange","state","roundState","players","values","updatePlayerList","isHost","onLeave","code","e","error","playerList","displayIndex","numElements","ListL","forEach","node","active","i","ListLabel"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Node, Sprite, tween, Vec3 } from \"cc\";\nconst { ccclass, property } = _decorator;\nimport Colyseus from \"db://colyseus-sdk/colyseus.js\";\nimport { AudioController } from \"./AudioController\";\n\n@ccclass(\"NetworkConnect\")\nexport class NetworkConnect extends Component {\n  @property({ type: String })\n  hostname = \"localhost\";\n\n  @property({ type: Number })\n  port = 80;\n\n  @property({ type: Boolean })\n  useSSL = true;\n\n  @property({ type: Node })\n  private ListL: Node[] = [];\n\n  @property({ type: Label })\n  private ListLabel: Label[] = [];\n\n  @property(Label)\n  private TimerDown: Label;\n\n  client!: Colyseus.Client;\n  room!: Colyseus.Room;\n  gameState;\n  resultDragon: number = 0;\n  resultTiger: number = 0;\n  TotalUser;\n  UserBet;\n  NotmeBet;\n  result;\n\n  @property({\n    type: AudioController,\n  })\n  private AudioController: AudioController;\n\n  start() {\n    this.client = new Colyseus.Client(\n      `${this.useSSL ? \"wss\" : \"ws\"}://${this.hostname}:${this.port}`\n    );\n\n    this.connect();\n  }\n\n  async connect() {\n    try {\n      const rooms = await this.client.getAvailableRooms(\"room1\");\n\n      if (rooms.length === 0) {\n        this.room = await this.client.create(\"room1\");\n        console.log(\"Created new room with sessionId:\", this.room.sessionId);\n      } else {\n        // Nếu có phòng có sẵn, tham gia vào phòng đầu tiên trong danh sách\n        this.room = await this.client.joinById(rooms[0].roomId);\n        console.log(\n          \"Joined existing room with sessionId:\",\n          this.room.sessionId\n        );\n      }\n\n      console.log(\"Joined successfully!\");\n      console.log(\"User's sessionId:\", this.room.sessionId);\n\n      // this.room.onMessage(\"playerList\", (message) => {\n      //   console.log(message);\n      //   this.updatePlayerList(message);\n      // });\n\n      this.room.onMessage(\"timer\", (message) => {\n        this.TimerDown.string = message;\n        if (message < 30 && message > 0) {\n          this.AudioController.onAudio(3);\n        }\n        if (message === 0) {\n          this.AudioController.onAudio(4);\n        }\n      });\n\n      this.room.onMessage(\"result\", (message) => {\n        console.log(message.result);\n        console.log(\"rong\", message.dragonCard.value);\n        console.log(\"ho\", message.tigerCard.value);\n      });\n\n      this.room.onMessage(\"userBet\", (message) => {\n        if (message.playerID !== this.room.sessionId) {\n          console.log(message);\n          this.UserBet = message.playerID;\n        } else {\n          console.log(\"false\");\n        }\n      });\n\n      this.room.onStateChange((state) => {\n        console.log(\"Room state changed:\", state);\n        console.log(\"onStateChange: \", state);\n        console.log(state.roundState);\n        console.log(this.room.state);\n        const players = [...state.players.values()];\n        this.updatePlayerList(players);\n        console.log(\"PlayerStatus\", players[0].isHost);\n        this.TotalUser = players.length;\n        this.gameState = state.roundState;\n      });\n\n      this.room.onLeave((code) => {\n        console.log(\"Left room with code:\", code);\n      });\n    } catch (e) {\n      console.error(\"Error:\", e);\n    }\n  }\n\n  updatePlayerList(playerList: any[]) {\n    let displayIndex = 0;\n    const numElements = playerList.length;\n    this.ListL.forEach((node) => {\n      node.active = false;\n    });\n    for (let i = 0; i < numElements && displayIndex < this.ListL.length; i++) {\n      if (playerList[i].sessionId !== this.room.sessionId) {\n        this.ListLabel[displayIndex].string = playerList[i].sessionId;\n        this.ListL[displayIndex].active = true;\n        displayIndex++;\n        this.AudioController.onAudio(9);\n      }\n    }\n    for (let i = displayIndex; i < this.ListL.length; i++) {\n      this.ListL[i].active = false;\n    }\n  }\n\n  // createSpriteNode(posX, PosY, PosNode: Node) {\n  //   // Tạo một Node mới\n  //   const spriteNode = new Node(\"SpriteNode\");\n  //   spriteNode.scale = new Vec3(0.5, 0.5);\n\n  //   // Thêm một component Sprite vào Node\n  //   const spriteComponent = spriteNode.addComponent(Sprite);\n\n  //   // Gán SpriteFrame cho component Sprite\n  //   spriteComponent.spriteFrame =\n  //     this.chipNode.buttonPub.node.getComponent(Sprite).spriteFrame;\n  //   // spriteNode.position=new Vec3(this.chipNode.buttonPub.node.position)\n  //   // Thêm Node vào Scene hiện tại (ví dụ: Node cha của tất cả Sprite)\n  //   PosNode.addChild(spriteNode);\n  //   tween(spriteNode)\n  //     .to(0.3, { position: new Vec3(posX, PosY) })\n  //     .start();\n  // }\n}\n"]}